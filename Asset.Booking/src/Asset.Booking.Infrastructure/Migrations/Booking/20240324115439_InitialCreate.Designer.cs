// <auto-generated />
using System;
using Asset.Booking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Asset.Booking.Infrastructure.Migrations.Booking
{
    [DbContext(typeof(BookingContext))]
    [Migration("20240324115439_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("booking")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Asset.Booking.Domain.AssetSchedule.AssetSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.HasKey("Id");

                    b.ToTable("asset_schedules", "booking");
                });

            modelBuilder.Entity("Asset.Booking.Domain.AssetSchedule.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<int>("ModeratorId")
                        .HasColumnType("integer")
                        .HasColumnName("moderator_id");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("reservations", "booking");
                });

            modelBuilder.Entity("Asset.Booking.Domain.Client.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.HasKey("Id");

                    b.ToTable("clients", "booking");
                });

            modelBuilder.Entity("Asset.Booking.Domain.AssetSchedule.Reservation", b =>
                {
                    b.HasOne("Asset.Booking.Domain.Client.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asset.Booking.Domain.AssetSchedule.AssetSchedule", null)
                        .WithMany("Reservations")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Asset.Booking.Domain.AssetSchedule.Cost", "Cost", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<int>("NumberOfNights")
                                .HasColumnType("integer")
                                .HasColumnName("nr_of_nights");

                            b1.Property<int>("NumberOfPeople")
                                .HasColumnType("integer")
                                .HasColumnName("nr_of_people");

                            b1.Property<decimal>("PricePerPerson")
                                .HasColumnType("numeric")
                                .HasColumnName("price_per_person");

                            b1.Property<decimal>("ServiceFee")
                                .HasColumnType("numeric")
                                .HasColumnName("service_fee");

                            b1.Property<decimal>("TotalCost")
                                .HasColumnType("numeric")
                                .HasColumnName("total_cost");

                            b1.Property<decimal>("VatCost")
                                .HasColumnType("numeric")
                                .HasColumnName("vat_cost");

                            b1.Property<float>("VatPercentage")
                                .HasColumnType("real")
                                .HasColumnName("vat_percent");

                            b1.HasKey("ReservationId");

                            b1.ToTable("reservations", "booking");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.OwnsOne("Asset.Booking.SharedKernel.DateRange", "Interval", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("Date")
                                .HasColumnName("interval_end");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("Date")
                                .HasColumnName("interval_start");

                            b1.HasKey("ReservationId");

                            b1.ToTable("reservations", "booking");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.Navigation("Cost")
                        .IsRequired();

                    b.Navigation("Interval")
                        .IsRequired();
                });

            modelBuilder.Entity("Asset.Booking.Domain.Client.Client", b =>
                {
                    b.OwnsOne("Asset.Booking.Domain.Client.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text")
                                .HasColumnName("adr_city");

                            b1.Property<string>("Street")
                                .HasColumnType("text")
                                .HasColumnName("adr_street");

                            b1.Property<string>("StreetNumber")
                                .HasColumnType("text")
                                .HasColumnName("adr_street_nr");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("text")
                                .HasColumnName("adr_zip");

                            b1.HasKey("ClientId");

                            b1.ToTable("clients", "booking");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("Asset.Booking.Domain.Client.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.HasKey("ClientId");

                            b1.ToTable("clients", "booking");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");

                            b1.OwnsMany("Asset.Booking.Domain.Client.PhoneNumber", "PhoneNumbers", b2 =>
                                {
                                    b2.Property<int>("id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("id"));

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("number");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("type");

                                    b2.Property<Guid>("client_id")
                                        .HasColumnType("uuid");

                                    b2.HasKey("id");

                                    b2.HasIndex("client_id");

                                    b2.ToTable("phone_numbers", "booking");

                                    b2.WithOwner()
                                        .HasForeignKey("client_id");
                                });

                            b1.Navigation("PhoneNumbers");
                        });

                    b.Navigation("Address");

                    b.Navigation("Contacts")
                        .IsRequired();
                });

            modelBuilder.Entity("Asset.Booking.Domain.AssetSchedule.AssetSchedule", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
